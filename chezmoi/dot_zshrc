# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(git)

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
export AUTO_TITLE_SCREENS="YES"
DISABLE_AUTO_TITLE="true"

export PROMPT="
%{$fg[white]%}(%D %*) <%?> [%~] $program %{$fg[default]%}
%{$fg[cyan]%}%m %#%{$fg[default]%} "

#export RPROMPT=

set-title() {
    echo -e "\e]0;$*\007"
}

ssh() {
    set-title $*;
    /usr/bin/ssh -2 $*;
    set-title $HOST;
}

alias e=emacs
if type fzf &> /dev/null; then
    export FZF_DEFAULT_OPTS='-m --height 50% --border'
    if type rg &> /dev/null; then
        export FZF_DEFAULT_COMMAND='rg --files'
    fi
fi
alias vim='nvim'
alias vimdiff='nvim -d'
export MYVIMRC=~/.vimrc

# use ohmyzsh
export ZSH=~/.oh-my-zsh
ZSH_THEME="robbyrussell"
DISABLE_AUTO_UPDATE="true"
plugins=(git fzf thefuck)
# (zsh-autosuggestions thefuck aws)
source $ZSH/oh-my-zsh.sh

# Load config files
alias open_dotfiles='vim ~/.vimrc ~/.zshrc ~/.tmux.conf ~/.vim/coc-settings.json ~/.vim/coc-settings.vimrc'

# Ctags
# alias build_ctags='ctags -R --exclude='*.py' --exclude='*.sql' *'
# Cscope
# alias build_cscope='cscope -q -R -b'

# GIT Aliases
alias gl='git log'
alias gd='git diff'
alias gad='git add'
alias gis='git status'
# alias rdm="rdm --rp-nice-value 999 -I${HOME}/padb/build/.ec/rootfs/rds/bin/gcc-7.3.0/include/ -I${HOME}/padb/build/.ec/rootfs/rds/bin/gcc-7.3.0/include/c++/7.3.0 -I${HOME}/padb/build/.ec/rootfs/rds/bin/gcc-7.3.0/include/c++/7.3.0/x86_64-pc-linux-gnu -I${HOME}/padb/build/.ec/rootfs/usr/local/include -I${HOME}/padb/build/.ec/rootfs/usr/include -I${HOME}/padb/build/.ec/rootfs/usr/include/libxml2"

# Git grep aliases
alias ggn='git grep -n'
alias ggc='git grep -n -C'
alias grd='git reflog --date=iso'
alias grm='git branch -m' # Old_name New_name
alias gfind='git log --all --name-only --pretty=format: | sort -u | grep '
alias gflist='git diff-tree --no-commit-id --name-only -r '
alias gri='git rebase --interactive'
alias \[rcpush\]='git push gerrit HEAD:refs/for/rc'
# Mention branch to push to w/o whitespace
alias \[push\]='git push gerrit HEAD:refs/for/'
function open_last_commit_files(){
  nvim $(git diff-tree --no-commit-id --name-only -r $1)
}
function open_last_commit_files(){
  $(git diff-tree --no-commit-id --name-only -r $1)
}

# Alias for mac M1
# https://medium.com/mkdir-awesome/how-to-install-x86-64-homebrew-packages-on-apple-m1-macbook-54ba295230f
alias brew_m1='arch -x86_64 brew '
# https://stackoverflow.com/questions/64963370/error-cannot-install-in-homebrew-on-arm-processor-in-intel-default-prefix-usr

alias jump_code_dir='cd ~/Desktop/Dev/'

# Install PLUG
# sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
#       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

# https://github.com/junegunn/fzf#preview-window

# BAT config
# https://github.com/sharkdp/bat#installation
export BAT_PAGER=ov #"less -RF"
export PAGER=ov
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
alias bathelp='bat --plain --language=help'

# NVM export needed for node and also CLI completion
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && \. "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# Python language support for COC
# Install PIP:
# Here we default use python3. If you still need python2, install python@2
# brew install python
# brew may have already installed a pip with above command. If not, do:
# cd ~/Downloads
# wget https://bootstrap.pypa.io/get-pip.py
# python3 get-pip.py --user
# pip install python-language-server
# https://github.com/neoclide/coc-pyls
#
# [Update Oct22] coc-pyright

# Pyflakes & Pycodestyle

# Git-delta
# brew install git-delta

# brew install cscope, global (gtags)

# Debugging
function adr2l() {
  addr2line -fspiCe ~/padb/rel/bin/padb $1
}

precommit() {
  ./make-build precommit
}

batdiff() {
    git difftool --tool=vimdiff --name-only --relative --diff-filter=d | xargs bat --diff
}

gdiff() {
  git diff | bat
}

build_cscope() {
  cscope -qRb
}

cr_from_build() {
  ~/padb/redtools/build_tools/build_finder.sh $1
}

precommit_for_cr() {
  ~/padb/bin/precommit -r $1
}

runnable_from_build() {
  python $XEN_ROOT/redtools/raff/bin/get_runnable.py --build-number '$1'
}

help() {
    "$@" --help 2>&1 | bathelp
}

# ZSH Right prompt
function preexec() {
#  timer=$(($(date +%s%0N)/1000000))
}

function precmd() {
  if [ $timer ]; then
    now=$(($(date +%s%0N)/1000000))
    elapsed=$(($now-$timer))
    export RPROMPT="[%F{red}${elapsed}ms%{$reset_color%}]"
    unset timer
  fi
}

precommit_on_list() {
  array=$1
  i=0
  echo "Number of CRs:" $#

  for var in "$@"
  do
    echo "Running on" $var
    ~/padb/bin/precommit -r "$var"
  done
}

# pip3 install pynvim --upgrade
# https://yadm.io/docs/getting_started#

# zsh-vi-mode
source $(brew  --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh
bindkey -v
bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
# bindkey '^r' history-incremental-search-backward
bindkey '^r' fzf-history-widget
zle
zle -R
function zle-line-init zle-keymap-select {
    VIM_PROMPT="%{$fg_bold[yellow]%} [% NORMAL]% %{$reset_color%}"
    INS_PROMPT="%{$fg_bold[green]%} [% INSERT]% %{$reset_color%}"
    RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/$INS_PROMPT} $EPS1"
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line
zvm_after_init_commands+=('source ~/.fzf')
export EDITOR=nvim
export FX_THEME=2

eval $(thefuck --alias)
echo "Sourced zsh config!"
export PATH=$HOME/.toolbox/bin:$PATH
export TERM=alacritty
